import { AnyAction } from 'redux';
import { RootState, initialState } from '../store';
import {
  GET_POLICY_TEMPLATES_REQUEST,
  GET_POLICY_TEMPLATES_SUCCESS,
  GET_POLICY_TEMPLATES_ERROR,
  GET_POLICY_TEMPLATE_REQUEST,
  GET_POLICY_TEMPLATE_SUCCESS,
  GET_POLICY_TEMPLATE_ERROR,
  MODIFY_POLICY_TEMPLATE,
  CREATE_POLICY_TEMPLATE_REQUEST,
  CREATE_POLICY_TEMPLATE_SUCCESS,
  CREATE_POLICY_TEMPLATE_ERROR,
  UPDATE_POLICY_TEMPLATE_REQUEST,
  UPDATE_POLICY_TEMPLATE_SUCCESS,
  UPDATE_POLICY_TEMPLATE_ERROR,
  BULK_DELETE_POLICY_TEMPLATES_REQUEST,
  BULK_DELETE_POLICY_TEMPLATES_SUCCESS,
  BULK_DELETE_POLICY_TEMPLATES_FAILURE,
  DELETE_POLICY_TEMPLATES_SINGLE_SUCCESS,
  DELETE_POLICY_TEMPLATES_SINGLE_ERROR,
  DELETE_SINGLE_POLICY_TEMPLATE_REQUEST,
  DELETE_SINGLE_POLICY_TEMPLATE_SUCCESS,
  DELETE_SINGLE_POLICY_TEMPLATE_ERROR,
  MODIFY_ACCESS_POLICY,
  MODIFY_TOKEN_ACCESS_POLICY,
  CHANGE_ACCESS_POLICY_TEST_CONTEXT,
  CHANGE_ACCESS_POLICY_TEST_PARAMS,
  CHANGE_POLICY_COMPONENTS,
  TOGGLE_POLICY_TEMPLATES_EDIT_MODE,
  TOGGLE_POLICY_TEMPLATE_FOR_DELETE,
  GET_USER_POLICY_PERMISSIONS_REQUEST,
  GET_USER_POLICY_PERMISSIONS_SUCCESS,
  GET_USER_POLICY_PERMISSIONS_ERROR,
  GET_ACCESS_POLICY_PERMISSIONS_REQUEST,
  GET_ACCESS_POLICY_PERMISSIONS_SUCCESS,
  GET_ACCESS_POLICY_PERMISSIONS_ERROR,
  GET_TRANSFORMER_PERMISSIONS_REQUEST,
  GET_TRANSFORMER_PERMISSIONS_SUCCESS,
  GET_TRANSFORMER_PERMISSIONS_ERROR,
  GET_ACCESS_POLICIES_REQUEST,
  GET_ACCESS_POLICIES_SUCCESS,
  GET_ACCESS_POLICIES_ERROR,
  GET_ALL_ACCESS_POLICIES_REQUEST,
  GET_ALL_ACCESS_POLICIES_ERROR,
  GET_ALL_ACCESS_POLICIES_SUCCESS,
  BULK_DELETE_ACCESS_POLICIES_REQUEST,
  BULK_DELETE_ACCESS_POLICIES_SUCCESS,
  BULK_DELETE_ACCESS_POLICIES_FAILURE,
  DELETE_ACCESS_POLICIES_SINGLE_SUCCESS,
  DELETE_ACCESS_POLICIES_SINGLE_ERROR,
  DELETE_SINGLE_ACCESS_POLICY_REQUEST,
  DELETE_SINGLE_ACCESS_POLICY_SUCCESS,
  DELETE_SINGLE_ACCESS_POLICY_ERROR,
  TOGGLE_ACCESS_POLICY_EDIT_MODE,
  TOGGLE_ACCESS_POLICY_DETAILS_EDIT_MODE,
  CHANGE_ACCESS_POLICY_LIST_INCLUDE_AUTOGENERATED,
  TOGGLE_ACCESS_POLICY_FOR_DELETE,
  GET_TRANSFORMERS_REQUEST,
  GET_TRANSFORMERS_SUCCESS,
  GET_TRANSFORMERS_ERROR,
  BULK_DELETE_TRANSFORMERS_REQUEST,
  BULK_DELETE_TRANSFORMERS_SUCCESS,
  BULK_DELETE_TRANSFORMERS_FAILURE,
  DELETE_TRANSFORMERS_SINGLE_SUCCESS,
  DELETE_TRANSFORMERS_SINGLE_ERROR,
  DELETE_SINGLE_TRANSFORMER_REQUEST,
  DELETE_SINGLE_TRANSFORMER_SUCCESS,
  DELETE_SINGLE_TRANSFORMER_ERROR,
  TOGGLE_TRANSFORMER_EDIT_MODE,
  TOGGLE_TRANSFORMER_DETAILS_EDIT_MODE,
  TOGGLE_TRANSFORMER_FOR_DELETE,
  CREATE_ACCESS_POLICY_REQUEST,
  CREATE_ACCESS_POLICY_SUCCESS,
  CREATE_ACCESS_POLICY_ERROR,
  GET_ACCESS_POLICY_REQUEST,
  GET_ACCESS_POLICY_SUCCESS,
  GET_ACCESS_POLICY_ERROR,
  GET_GLOBAL_ACCESSOR_POLICY_REQUEST,
  GET_GLOBAL_ACCESSOR_POLICY_SUCCESS,
  GET_GLOBAL_ACCESSOR_POLICY_ERROR,
  GET_TRANSFORMER_REQUEST,
  GET_TRANSFORMER_SUCCESS,
  GET_TRANSFORMER_ERROR,
  GET_GLOBAL_MUTATOR_POLICY_REQUEST,
  GET_GLOBAL_MUTATOR_POLICY_SUCCESS,
  GET_GLOBAL_MUTATOR_POLICY_ERROR,
  CHANGE_TRANSFORMER,
  CHANGE_TRANSFORMER_TEST_DATA,
  UPDATE_ACCESS_POLICY_REQUEST,
  UPDATE_ACCESS_POLICY_SUCCESS,
  UPDATE_ACCESS_POLICY_ERROR,
  TEST_POLICY_REQUEST,
  TEST_POLICY_SUCCESS,
  TEST_POLICY_ERROR,
  TEST_TRANSFORMER_REQUEST,
  TEST_TRANSFORMER_SUCCESS,
  TEST_TRANSFORMER_ERROR,
  CREATE_TRANSFORMER_REQUEST,
  CREATE_TRANSFORMER_SUCCESS,
  CREATE_TRANSFORMER_ERROR,
  UPDATE_TRANSFORMER_REQUEST,
  UPDATE_TRANSFORMER_SUCCESS,
  UPDATE_TRANSFORMER_ERROR,
  GET_TOKEN_ACCESS_POLICY_REQUEST,
  GET_TOKEN_ACCESS_POLICY_SUCCESS,
  GET_TOKEN_ACCESS_POLICY_ERROR,
  SET_POLICY_PAGINATED_SELECTOR_COMPONENT,
  CHANGE_TRANSFORMER_SEARCH_FILTER,
  CHANGE_ACCESS_POLICY_SEARCH_FILTER,
  CHANGE_ACCESS_POLICY_TEMPLATE_SEARCH_FILTER,
  LAUNCH_POLICY_CHOOSER_FOR_POLICY_TEMPLATE,
  LAUNCH_POLICY_CHOOSER_FOR_ACCESS_POLICY,
  SELECT_POLICY_OR_TEMPLATE_FROM_CHOOSER,
  CLOSE_POLICY_CHOOSER,
  LAUNCH_POLICY_TEMPLATE_DIALOG,
  CLOSE_POLICY_TEMPLATE_DIALOG,
  MODIFY_ACCESS_POLICY_THRESHOLDS,
  TOGGLE_POLICY_SECRET_FOR_DELETE,
  TOGGLE_POLICY_SECRETS_DELETE_ALL,
  FETCH_TENANT_POLICY_SECRETS_REQUEST,
  FETCH_TENANT_POLICY_SECRETS_SUCCESS,
  FETCH_TENANT_POLICY_SECRETS_ERROR,
  INITIALIZE_TENANT_POLICY_SECRET,
  MODIFY_POLICY_SECRET,
  SAVE_POLICY_SECRET_REQUEST,
  SAVE_POLICY_SECRET_ERROR,
} from '../actions/tokenizer';
import AccessPolicy, {
  AccessPolicyTemplate,
  blankPolicy,
  blankPolicyTemplate,
  ComponentPolicy,
  PolicySelectorResourceType,
  stringifyContext,
} from '../models/AccessPolicy';
import {
  DATE_COLUMNS,
  setOperatorsForFilter,
  STRING_COLUMNS,
  UUID_COLUMNS,
} from '../controls/SearchHelper';
import { blankPolicySecret } from '../models/PolicySecret';
import { Operators } from '../models/authz/SearchFilters';
import { deepEqual, getNewToggleEditValue } from './reducerHelper';

const tokenizerReducer = (state: RootState, action: AnyAction) => {
  switch (action.type) {
    // Permissions
    case GET_USER_POLICY_PERMISSIONS_REQUEST:
      state.userPolicyPermissions = undefined;
      state.fetchingUserPolicyPermissions = true;
      state.userPolicyPermissionsFetchError = '';
      break;
    case GET_USER_POLICY_PERMISSIONS_SUCCESS:
      state.userPolicyPermissions = action.data;
      state.fetchingUserPolicyPermissions = false;
      break;
    case GET_USER_POLICY_PERMISSIONS_ERROR:
      state.userPolicyPermissionsFetchError = action.data;
      state.fetchingUserPolicyPermissions = false;
      break;
    case GET_ACCESS_POLICY_PERMISSIONS_REQUEST:
      state.accessPolicyPermissions = undefined;
      state.accessPolicyFetchError = '';
      break;
    case GET_ACCESS_POLICY_PERMISSIONS_SUCCESS:
      state.accessPolicyPermissions = action.data;
      break;
    case GET_ACCESS_POLICY_PERMISSIONS_ERROR:
      state.accessPolicyFetchError = action.data;
      break;
    case GET_TRANSFORMER_PERMISSIONS_REQUEST:
      state.transformerPermissions = undefined;
      state.transformerFetchError = '';
      break;
    case GET_TRANSFORMER_PERMISSIONS_SUCCESS:
      state.transformerPermissions = action.data;
      break;
    case GET_TRANSFORMER_PERMISSIONS_ERROR:
      state.transformerFetchError = action.data;
      break;

    // Access Policies
    case GET_ACCESS_POLICIES_REQUEST:
      state.fetchingAccessPolicies = true;
      state.accessPolicies = undefined;
      state.accessPolicyFetchError = '';
      break;
    case GET_ACCESS_POLICIES_SUCCESS:
      state.fetchingAccessPolicies = false;
      state.accessPolicies = action.data;
      break;
    case GET_ACCESS_POLICIES_ERROR:
      state.fetchingAccessPolicies = false;
      state.accessPolicyFetchError = action.data;
      break;

    case GET_ALL_ACCESS_POLICIES_REQUEST:
      state.fetchingAllAccessPolicies = true;
      state.allAccessPolicies = undefined;
      state.allAccessPoliciesFetchError = '';
      break;
    case GET_ALL_ACCESS_POLICIES_SUCCESS:
      state.fetchingAllAccessPolicies = false;
      state.allAccessPolicies = action.data;
      break;
    case GET_ALL_ACCESS_POLICIES_ERROR:
      state.fetchingAllAccessPolicies = false;
      state.allAccessPoliciesFetchError = action.data;
      break;

    case CHANGE_ACCESS_POLICY_LIST_INCLUDE_AUTOGENERATED:
      state.accessPoliciesIncludeAutogenerated = action.data;
      break;

    case TOGGLE_ACCESS_POLICY_FOR_DELETE: {
      const index = state.accessPoliciesDeleteQueue.indexOf(action.data);
      if (index > -1) {
        state.accessPoliciesDeleteQueue =
          state.accessPoliciesDeleteQueue.toSpliced(index, 1);
      } else {
        state.accessPoliciesDeleteQueue = [
          ...state.accessPoliciesDeleteQueue,
          action.data,
        ];
      }
      break;
    }
    case BULK_DELETE_ACCESS_POLICIES_REQUEST:
      state.deletingAccessPolicy = true;
      state.deleteAccessPoliciesErrors = [];
      state.deleteAccessPoliciesSuccess = '';
      break;
    case BULK_DELETE_ACCESS_POLICIES_SUCCESS:
      state.deletingAccessPolicy = false;
      state.deleteAccessPoliciesSuccess =
        'Successfully deleted access policies.';
      state.accessPolicyEditMode = false;
      break;
    case BULK_DELETE_ACCESS_POLICIES_FAILURE:
      state.deletingAccessPolicy = false;
      break;
    case DELETE_ACCESS_POLICIES_SINGLE_SUCCESS:
      state.accessPoliciesDeleteQueue = state.accessPoliciesDeleteQueue.filter(
        (policyID: string) => policyID !== action.data
      );
      break;
    case DELETE_ACCESS_POLICIES_SINGLE_ERROR:
      state.deleteAccessPoliciesErrors = [
        ...state.deleteAccessPoliciesErrors,
        action.data,
      ];
      break;

    case DELETE_SINGLE_ACCESS_POLICY_REQUEST:
      state.deletingAccessPolicy = true;
      state.accessPolicyDeleteSuccess = false;
      state.accessPolicyDeleteError = '';
      break;
    case DELETE_SINGLE_ACCESS_POLICY_SUCCESS:
      state.accessPolicyDeleteSuccess = true;
      state.deletingAccessPolicy = false;
      break;
    case DELETE_SINGLE_ACCESS_POLICY_ERROR:
      state.accessPolicyDeleteError = action.data;
      state.deletingAccessPolicy = false;
      break;
    case TOGGLE_ACCESS_POLICY_EDIT_MODE:
      state.deleteAccessPoliciesErrors = [];
      state.deleteAccessPoliciesSuccess = '';
      state.accessPolicyDeleteError = '';
      state.accessPolicyEditMode = getNewToggleEditValue(
        action.data,
        state.accessPolicyEditMode
      );
      state.accessPoliciesDeleteQueue = [];
      break;
    case TOGGLE_ACCESS_POLICY_DETAILS_EDIT_MODE:
      state.savingAccessPolicy = false;
      state.transformerIsDirty = false;
      state.testingPolicy = false;
      state.saveAccessPolicyError = '';
      if (state.currentAccessPolicy) {
        state.modifiedAccessPolicy = { ...state.currentAccessPolicy };
        state.modifiedAccessPolicy.required_context_stringified =
          stringifyContext(state.modifiedAccessPolicy);
        state.accessPolicyIsDirty = false;
      }
      state.accessPolicyDetailsEditMode = getNewToggleEditValue(
        action.data,
        state.accessPolicyDetailsEditMode
      );
      break;
    case MODIFY_POLICY_TEMPLATE:
      {
        const { changes, isNew } = action.data;
        if (isNew) {
          state.policyTemplateToCreate =
            state.policyTemplateToCreate || blankPolicyTemplate();
          state.policyTemplateToCreate = {
            ...state.policyTemplateToCreate,
            ...changes,
          };
        } else {
          state.policyTemplateToModify = {
            ...state.policyTemplateToModify,
            ...changes,
          };
        }
      }
      break;
    case GET_POLICY_TEMPLATES_REQUEST:
      state.fetchingPolicyTemplates = true;
      state.policyTemplateToCreate = blankPolicyTemplate();
      state.policyTemplateEditMode = false;
      state.policyTemplateSaveSuccess = false;
      state.policyTemplateSaveError = '';
      break;
    case GET_POLICY_TEMPLATES_SUCCESS:
      state.fetchingPolicyTemplates = false;
      state.policyTemplates = action.data;
      break;
    case GET_POLICY_TEMPLATES_ERROR:
      state.fetchingPolicyTemplates = false;
      state.policyTemplatesFetchError = action.data;
      state.policyTemplates = undefined;
      break;
    case GET_POLICY_TEMPLATE_REQUEST:
      state.fetchingPolicyTemplates = true;
      state.selectedPolicyTemplate = undefined;
      state.policyTemplateToModify = undefined;
      state.policyTemplateSaveSuccess = false;
      state.policyTemplateSaveError = '';
      break;
    case GET_POLICY_TEMPLATE_SUCCESS:
      state.fetchingPolicyTemplates = false;
      state.selectedPolicyTemplate = action.data;
      state.policyTemplateToModify = { ...action.data };
      break;
    case GET_POLICY_TEMPLATE_ERROR:
      state.fetchingPolicyTemplates = false;
      state.policyTemplatesFetchError = action.data;
      break;
    case CREATE_POLICY_TEMPLATE_REQUEST:
      state.savingPolicyTemplate = true;
      state.policyTemplateSaveSuccess = false;
      state.policyTemplateSaveError = '';
      break;
    case CREATE_POLICY_TEMPLATE_SUCCESS:
      state.savingPolicyTemplate = false;
      state.policyTemplateSaveSuccess = true;
      state.policyTemplateToCreate = blankPolicyTemplate();
      state.policyTemplateEditMode = false;
      break;
    case CREATE_POLICY_TEMPLATE_ERROR:
      state.savingPolicyTemplate = false;
      state.policyTemplateSaveError = action.data;
      break;
    case TOGGLE_POLICY_TEMPLATES_EDIT_MODE: {
      let newMode;
      if (typeof action.data !== 'undefined') {
        newMode = action.data;
      } else {
        newMode = !state.policyTemplateEditMode;
      }
      state.policyTemplateEditMode = newMode;
      state.deletePolicyTemplatesSuccess = '';
      state.deletePolicyTemplatesErrors = [];
      state.policyTemplatesDeleteQueue = [];
      if (state.selectedPolicyTemplate) {
        state.policyTemplateToModify = { ...state.selectedPolicyTemplate };
      }
      break;
    }
    case UPDATE_POLICY_TEMPLATE_REQUEST:
      state.savingPolicyTemplate = true;
      state.policyTemplateSaveSuccess = false;
      state.policyTemplateSaveError = '';
      break;
    case UPDATE_POLICY_TEMPLATE_SUCCESS:
      state.savingPolicyTemplate = false;
      state.policyTemplateSaveSuccess = true;
      state.selectedPolicyTemplate = action.data;
      state.policyTemplateToModify = { ...action.data };
      state.policyTemplateEditMode = false;
      break;
    case UPDATE_POLICY_TEMPLATE_ERROR:
      state.savingPolicyTemplate = false;
      state.policyTemplateSaveError = action.data;
      break;
    case TOGGLE_POLICY_TEMPLATE_FOR_DELETE: {
      const index = state.policyTemplatesDeleteQueue.indexOf(action.data);
      if (index > -1) {
        state.policyTemplatesDeleteQueue =
          state.policyTemplatesDeleteQueue.toSpliced(index, 1);
      } else {
        state.policyTemplatesDeleteQueue = [
          ...state.policyTemplatesDeleteQueue,
          action.data,
        ];
      }
      break;
    }
    case BULK_DELETE_POLICY_TEMPLATES_REQUEST:
      state.deletingPolicyTemplate = true;
      state.deletePolicyTemplatesSuccess = '';
      state.deletePolicyTemplatesErrors = [];
      break;
    case BULK_DELETE_POLICY_TEMPLATES_SUCCESS:
      state.deletingPolicyTemplate = false;
      state.deletePolicyTemplatesSuccess =
        'Successfully deleted access policy templates.';
      state.policyTemplateEditMode = false;
      break;
    case BULK_DELETE_POLICY_TEMPLATES_FAILURE:
      state.deletingPolicyTemplate = false;
      break;
    case DELETE_POLICY_TEMPLATES_SINGLE_SUCCESS:
      state.policyTemplatesDeleteQueue =
        state.policyTemplatesDeleteQueue.filter(
          (templateID: string) => templateID !== action.data
        );
      break;
    case DELETE_POLICY_TEMPLATES_SINGLE_ERROR:
      state.deletePolicyTemplatesErrors = [
        ...state.deletePolicyTemplatesErrors,
        action.data,
      ];
      break;
    case DELETE_SINGLE_POLICY_TEMPLATE_REQUEST:
      state.deletingPolicyTemplate = true;
      state.policyTemplateDeleteSuccess = false;
      state.policyTemplateDeleteError = undefined;
      break;
    case DELETE_SINGLE_POLICY_TEMPLATE_SUCCESS:
      state.policyTemplateDeleteSuccess = true;
      state.deletingPolicyTemplate = false;
      break;
    case DELETE_SINGLE_POLICY_TEMPLATE_ERROR:
      state.policyTemplateDeleteError = action.data;
      state.deletingPolicyTemplate = false;
      break;
    case CHANGE_ACCESS_POLICY_TEMPLATE_SEARCH_FILTER:
      {
        state.accessPolicyTemplateSearchFilter = {
          ...state.accessPolicyTemplateSearchFilter,
          ...action.data,
        };
        const accessPolicyTemplateColumn =
          state.accessPolicyTemplateSearchFilter.columnName;
        if (STRING_COLUMNS.includes(accessPolicyTemplateColumn)) {
          state.accessPolicyTemplateSearchFilter.operator = Operators.LIKE;
        } else if (UUID_COLUMNS.includes(accessPolicyTemplateColumn)) {
          state.accessPolicyTemplateSearchFilter.operator = Operators.EQUAL;
        } else if (DATE_COLUMNS.includes(accessPolicyTemplateColumn)) {
          state.accessPolicyTemplateSearchFilter.operator =
            Operators.GREATER_THAN_EQUAL;
          state.accessPolicyTemplateSearchFilter.operator2 =
            Operators.LESS_THAN_EQUAL;
        }
      }
      break;
    // Transformers
    case GET_TRANSFORMERS_REQUEST:
      state.fetchingTransformers = true;
      break;
    case GET_TRANSFORMERS_SUCCESS:
      state.fetchingTransformers = false;
      state.transformers = action.data;
      break;
    case GET_TRANSFORMERS_ERROR:
      state.fetchingTransformers = false;
      state.transformerFetchError = action.data;
      state.transformers = undefined;
      break;
    case TOGGLE_TRANSFORMER_FOR_DELETE: {
      const index = state.transformersDeleteQueue.indexOf(action.data);
      if (index > -1) {
        state.transformersDeleteQueue = state.transformersDeleteQueue.toSpliced(
          index,
          1
        );
      } else {
        state.transformersDeleteQueue = [
          ...state.transformersDeleteQueue,
          action.data,
        ];
      }
      break;
    }
    case BULK_DELETE_TRANSFORMERS_REQUEST:
      state.deletingTransformer = true;
      state.deleteTransformersSuccess = '';
      state.deleteTransformersErrors = [];
      break;
    case BULK_DELETE_TRANSFORMERS_SUCCESS:
      state.deletingTransformer = false;
      state.deleteTransformersSuccess = 'Successfully deleted transformers.';
      state.transformerEditMode = false;
      break;
    case BULK_DELETE_TRANSFORMERS_FAILURE:
      state.deletingTransformer = false;
      break;
    case DELETE_TRANSFORMERS_SINGLE_SUCCESS:
      state.transformersDeleteQueue = state.transformersDeleteQueue.filter(
        (transformerID: string) => transformerID !== action.data
      );
      break;
    case DELETE_TRANSFORMERS_SINGLE_ERROR:
      state.deleteTransformersErrors = [
        ...state.deleteTransformersErrors,
        action.data,
      ];
      break;
    case DELETE_SINGLE_TRANSFORMER_REQUEST:
      state.deletingTransformer = true;
      state.transformerDeleteSuccess = false;
      state.transformerDeleteError = '';
      break;
    case DELETE_SINGLE_TRANSFORMER_SUCCESS:
      state.transformerDeleteSuccess = true;
      state.deletingTransformer = false;
      break;
    case DELETE_SINGLE_TRANSFORMER_ERROR:
      state.transformerDeleteError = action.data;
      state.deletingTransformer = false;
      break;
    case TOGGLE_TRANSFORMER_EDIT_MODE:
      state.transformerDeleteError = '';
      state.transformerEditMode = getNewToggleEditValue(
        action.data,
        state.transformerEditMode
      );
      state.deleteTransformersSuccess = '';
      state.deleteTransformersErrors = [];
      state.transformersDeleteQueue = [];
      break;

    // NEW POLICY PAGE
    case CREATE_ACCESS_POLICY_REQUEST:
      state.savingAccessPolicy = true;
      state.testingPolicy = false;
      state.saveAccessPolicyError = '';
      break;
    case CREATE_ACCESS_POLICY_SUCCESS:
      state.savingAccessPolicy = false;
      state.currentAccessPolicy = action.data;
      state.modifiedAccessPolicy = { ...action.data };
      state.accessPolicyIsDirty = false;
      break;
    case CREATE_ACCESS_POLICY_ERROR:
      state.savingAccessPolicy = false;
      state.saveAccessPolicyError = action.data;
      break;

    // EDIT POLICY PAGE
    case GET_ACCESS_POLICY_REQUEST:
      state.fetchingAccessPolicies = true;
      state.accessPolicyFetchError = '';
      state.currentAccessPolicy = undefined;
      state.modifiedAccessPolicy = blankPolicy();
      state.accessPolicyIsDirty = false;
      state.accessPolicyTestContext = initialState.accessPolicyTestContext;
      state.saveAccessPolicyError = '';
      state.testingPolicyResult = undefined;
      state.testingPolicyError = '';
      break;
    case GET_ACCESS_POLICY_SUCCESS:
      state.fetchingAccessPolicies = false;
      state.currentAccessPolicy = action.data;
      state.currentAccessPolicy!.required_context_stringified =
        stringifyContext(state.currentAccessPolicy!);
      state.modifiedAccessPolicy = { ...action.data };
      state.modifiedAccessPolicy!.required_context_stringified =
        stringifyContext(state.modifiedAccessPolicy!);
      break;
    case GET_ACCESS_POLICY_ERROR:
      state.fetchingAccessPolicies = false;
      state.accessPolicyFetchError = action.data;
      break;
    case GET_GLOBAL_ACCESSOR_POLICY_REQUEST:
      state.fetchingGlobalAccessorPolicy = true;
      break;
    case GET_GLOBAL_ACCESSOR_POLICY_SUCCESS:
      state.fetchingGlobalAccessorPolicy = false;
      state.globalAccessorPolicy = action.data;
      break;
    case GET_GLOBAL_ACCESSOR_POLICY_ERROR:
      state.fetchingGlobalAccessorPolicy = false;
      state.globalAccessorPolicyFetchError = action.data;
      break;
    case GET_GLOBAL_MUTATOR_POLICY_REQUEST:
      state.fetchingGlobalMutatorPolicy = true;
      break;
    case GET_GLOBAL_MUTATOR_POLICY_SUCCESS:
      state.fetchingGlobalMutatorPolicy = false;
      state.globalMutatorPolicy = action.data;
      break;
    case GET_GLOBAL_MUTATOR_POLICY_ERROR:
      state.fetchingGlobalMutatorPolicy = false;
      state.globalMutatorPolicyFetchError = action.data;
      break;
    case GET_TRANSFORMER_REQUEST:
      state.fetchingTransformers = true;
      state.transformerFetchError = '';
      state.currentTransformer = undefined;
      state.modifiedTransformer = undefined;
      state.transformerIsDirty = false;
      state.transformerTestData = initialState.transformerTestData;
      state.testingTransformerResult = undefined;
      state.testingTransformerError = '';
      state.saveTransformerSuccess = '';
      state.saveTransformerError = '';
      break;
    case GET_TRANSFORMER_SUCCESS:
      state.fetchingTransformers = false;
      state.currentTransformer = action.data;
      state.modifiedTransformer = { ...action.data };
      state.transformerIsDirty = false;
      break;
    case GET_TRANSFORMER_ERROR:
      state.fetchingTransformers = false;
      state.transformerFetchError = action.data;
      break;
    case CHANGE_TRANSFORMER_SEARCH_FILTER:
      state.transformerSearchFilter = {
        ...state.transformerSearchFilter,
        ...setOperatorsForFilter(action.data),
      };
      break;
    case MODIFY_ACCESS_POLICY:
      if (state.modifiedAccessPolicy) {
        state.modifiedAccessPolicy = {
          ...state.modifiedAccessPolicy,
          ...action.data,
        };
        state.accessPolicyIsDirty = !deepEqual(
          state.modifiedAccessPolicy,
          state.currentAccessPolicy
        );
        state.modifiedAccessorIsDirty = !deepEqual(
          state.modifiedAccessor?.access_policy,
          state.modifiedAccessPolicy
        );
        state.modifiedMutatorIsDirty = !deepEqual(
          state.modifiedMutator?.access_policy,
          state.modifiedAccessPolicy
        );
      }
      break;
    case MODIFY_TOKEN_ACCESS_POLICY:
      state.modifiedTokenAccessPolicy = {
        ...state.modifiedTokenAccessPolicy,
        ...action.data,
      };
      state.tokenAccessPolicyIsDirty = !deepEqual(
        state.modifiedTokenAccessPolicy,
        state.currentTokenAccessPolicy
      );
      break;
    case MODIFY_ACCESS_POLICY_THRESHOLDS:
      if (state.modifiedAccessPolicy) {
        const newThresholds = {
          ...state.modifiedAccessPolicy.thresholds,
          ...action.data,
        };
        state.modifiedAccessPolicy = {
          ...state.modifiedAccessPolicy,
          thresholds: newThresholds,
        };
        state.accessPolicyIsDirty = !deepEqual(
          state.modifiedAccessPolicy,
          state.currentAccessPolicy
        );
        state.modifiedAccessorIsDirty = !deepEqual(
          state.modifiedAccessor?.access_policy,
          state.modifiedAccessPolicy
        );
        state.modifiedMutatorIsDirty = !deepEqual(
          state.modifiedMutator?.access_policy,
          state.modifiedAccessPolicy
        );
      }
      break;
    case GET_TOKEN_ACCESS_POLICY_REQUEST:
      state.fetchingAccessPolicies = true;
      state.tokenAccessPolicyFetchError = '';
      state.currentTokenAccessPolicy = undefined;
      state.modifiedTokenAccessPolicy = undefined;
      state.saveTokenAccessPolicySuccess = '';
      break;
    case GET_TOKEN_ACCESS_POLICY_SUCCESS:
      state.fetchingAccessPolicies = false;
      state.currentTokenAccessPolicy = action.data;
      state.modifiedTokenAccessPolicy = { ...action.data };
      state.tokenAccessPolicyIsDirty = false;
      break;
    case GET_TOKEN_ACCESS_POLICY_ERROR:
      state.fetchingAccessPolicies = false;
      state.tokenAccessPolicyFetchError = action.data;
      break;
    case CHANGE_ACCESS_POLICY_TEST_CONTEXT:
      state.accessPolicyTestContext = action.data;
      break;
    case CHANGE_ACCESS_POLICY_TEST_PARAMS:
      state.accessPolicyTestParams = action.data;
      break;
    case CHANGE_POLICY_COMPONENTS:
      {
        const { policies, templates } = action.data;
        const newComponents: ComponentPolicy[] = [];
        if (policies) {
          policies.forEach((policy: AccessPolicy) => {
            newComponents.push({
              isPolicy: true,
              policy: policy,
              template: blankPolicyTemplate(),
              template_parameters: '',
            });
          });
        }
        if (templates) {
          templates.forEach((template: AccessPolicyTemplate) => {
            newComponents.push({
              isPolicy: false,
              policy: blankPolicy(),
              template: template,
              template_parameters: '',
            });
          });
        }
        state.componentPolicies = newComponents;
        state.accessPolicyIsDirty =
          JSON.stringify(state.modifiedAccessPolicy) !==
          JSON.stringify(state.currentAccessPolicy);
      }
      break;
    case CHANGE_TRANSFORMER:
      state.modifiedTransformer = {
        ...state.modifiedTransformer,
        ...action.data,
      };
      state.transformerIsDirty =
        JSON.stringify(state.currentTransformer) !==
        JSON.stringify(state.modifiedTransformer);
      break;
    case CHANGE_TRANSFORMER_TEST_DATA:
      state.transformerTestData = action.data;
      break;
    case UPDATE_ACCESS_POLICY_REQUEST: // TODO handle for transformers
      state.savingAccessPolicy = true;
      state.testingPolicy = false;
      state.saveAccessPolicyError = '';
      break;
    case UPDATE_ACCESS_POLICY_SUCCESS:
      state.savingAccessPolicy = false;
      state.currentAccessPolicy = action.data;
      state.currentAccessPolicy!.required_context_stringified =
        stringifyContext(state.currentAccessPolicy!);
      state.modifiedAccessPolicy = { ...action.data };
      state.modifiedAccessPolicy!.required_context_stringified =
        stringifyContext(state.modifiedAccessPolicy!);
      state.accessPolicyIsDirty = false;
      break;
    case UPDATE_ACCESS_POLICY_ERROR:
      state.savingAccessPolicy = false;
      state.saveAccessPolicyError = action.data;
      break;
    case CHANGE_ACCESS_POLICY_SEARCH_FILTER:
      state.accessPolicySearchFilter = {
        ...state.accessPolicySearchFilter,
        ...setOperatorsForFilter(action.data),
      };
      break;
    case CREATE_TRANSFORMER_REQUEST:
      state.savingTransformer = true;
      state.testingPolicy = false;
      state.saveTransformerSuccess = '';
      state.saveTransformerError = '';
      break;
    case CREATE_TRANSFORMER_SUCCESS:
      state.savingTransformer = false;
      state.currentTransformer = action.data;
      state.modifiedTransformer = { ...action.data };
      state.transformerIsDirty = false;
      state.saveTransformerSuccess = 'Successfully saved Transformer';
      break;
    case CREATE_TRANSFORMER_ERROR:
      state.savingTransformer = false;
      state.saveTransformerError = action.data;
      break;
    case UPDATE_TRANSFORMER_REQUEST:
      state.savingTransformer = true;
      state.testingPolicy = false;
      state.saveTransformerSuccess = '';
      state.saveTransformerError = '';
      break;
    case UPDATE_TRANSFORMER_SUCCESS:
      state.savingTransformer = false;
      state.currentTransformer = action.data;
      state.modifiedTransformer = { ...action.data };
      state.transformerIsDirty = false;
      state.saveTransformerSuccess = 'Successfully saved Transformer';
      break;
    case UPDATE_TRANSFORMER_ERROR:
      state.savingTransformer = false;
      state.saveTransformerError = action.data;
      break;
    case TOGGLE_TRANSFORMER_DETAILS_EDIT_MODE:
      state.savingTransformer = false;
      state.transformerIsDirty = false;
      state.testingPolicy = false;
      state.saveTransformerSuccess = '';
      state.saveTransformerError = '';
      state.transformerDetailsEditMode = getNewToggleEditValue(
        action.data,
        state.transformerDetailsEditMode
      );
      if (state.currentTransformer) {
        state.modifiedTransformer = { ...state.currentTransformer };
        state.transformerIsDirty = false;
      }
      break;
    case TEST_TRANSFORMER_REQUEST:
      state.testingTransformer = true;
      state.testingTransformerResult = undefined;
      state.testingTransformerError = '';
      state.saveTransformerSuccess = '';
      state.saveTransformerError = '';
      break;
    case TEST_TRANSFORMER_SUCCESS:
      state.testingTransformer = false;
      state.testingTransformerResult = { ...action.data };
      state.testingTransformerError = '';
      break;
    case TEST_TRANSFORMER_ERROR:
      state.testingTransformer = false;
      state.testingTransformerResult = undefined;
      state.testingTransformerError = action.data;
      break;
    case TEST_POLICY_REQUEST:
      state.testingPolicy = true;
      state.testingPolicyResult = undefined;
      state.testingPolicyError = '';
      state.saveAccessPolicyError = '';
      break;
    case TEST_POLICY_SUCCESS:
      state.testingPolicy = false;
      state.testingPolicyResult = action.data;
      state.testingPolicyError = '';
      break;
    case TEST_POLICY_ERROR:
      state.testingPolicy = false;
      state.testingPolicyResult = undefined;
      state.testingPolicyError = action.data;
      break;
    case SET_POLICY_PAGINATED_SELECTOR_COMPONENT:
      state.paginatedPolicyChooserComponent = action.data;
      state.paginatedPolicyChooserSelectedResource = undefined;
      break;
    case LAUNCH_POLICY_CHOOSER_FOR_POLICY_TEMPLATE:
      state.policySelectorResourceType = PolicySelectorResourceType.TEMPLATE;
      state.policyChooserIsOpen = true;
      state.paginatedPolicyChooserSelectedResource = undefined;
      break;
    case LAUNCH_POLICY_CHOOSER_FOR_ACCESS_POLICY:
      state.policySelectorResourceType = PolicySelectorResourceType.POLICY;
      state.policyChooserIsOpen = true;
      state.paginatedPolicyChooserSelectedResource = undefined;
      break;
    case SELECT_POLICY_OR_TEMPLATE_FROM_CHOOSER:
      state.paginatedPolicyChooserSelectedResource = action.data;
      break;
    case CLOSE_POLICY_CHOOSER:
      state.policyChooserIsOpen = false;
      state.paginatedPolicyChooserSelectedResource = undefined;
      break;
    case LAUNCH_POLICY_TEMPLATE_DIALOG:
      state.policyTemplateDialogIsOpen = true;
      state.policyChooserIsOpen = false;
      state.testingPolicyResult = undefined;
      state.testingPolicyError = '';
      state.paginatedPolicyChooserSelectedResource = action.data;
      break;
    case CLOSE_POLICY_TEMPLATE_DIALOG:
      state.policyTemplateDialogIsOpen = true;
      state.testingPolicyResult = undefined;
      state.testingPolicyError = '';
      break;
    case FETCH_TENANT_POLICY_SECRETS_REQUEST:
      state.fetchingPolicySecrets = true;
      state.policySecrets = undefined;
      state.fetchPolicySecretsError = '';
      break;
    case FETCH_TENANT_POLICY_SECRETS_SUCCESS:
      state.fetchingPolicySecrets = false;
      state.policySecrets = { ...action.data };
      break;
    case FETCH_TENANT_POLICY_SECRETS_ERROR:
      state.fetchingPolicySecrets = false;
      state.fetchPolicySecretsError = action.data;
      break;
    case TOGGLE_POLICY_SECRET_FOR_DELETE:
      {
        const index = state.policySecretDeleteQueue.indexOf(action.data);
        if (index > -1) {
          state.policySecretDeleteQueue =
            state.policySecretDeleteQueue.toSpliced(index, 1);
        } else {
          state.policySecretDeleteQueue = [
            ...state.policySecretDeleteQueue,
            action.data,
          ];
        }
      }
      break;
    case TOGGLE_POLICY_SECRETS_DELETE_ALL:
      if (state.policySecrets && state.policySecrets.data) {
        const shouldMarkForDelete = action.data;
        if (shouldMarkForDelete) {
          state.policySecretDeleteQueue = state.policySecrets.data.map(
            (secret) => secret.id
          );
        } else {
          state.policySecretDeleteQueue = [];
        }
      }
      break;
    case INITIALIZE_TENANT_POLICY_SECRET:
      state.modifiedPolicySecret = blankPolicySecret();
      state.savePolicySecretError = '';
      break;
    case MODIFY_POLICY_SECRET:
      state.modifiedPolicySecret = {
        ...state.modifiedPolicySecret,
        ...action.data,
      };
      break;
    case SAVE_POLICY_SECRET_REQUEST:
      state.savePolicySecretError = '';
      break;
    case SAVE_POLICY_SECRET_ERROR:
      state.savePolicySecretError = action.data;
      break;
    default:
      break;
  }
  return state;
};

export default tokenizerReducer;
