// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package storage

import (
	json "encoding/json"

	uuid "github.com/gofrs/uuid"
	easyjson "github.com/userclouds/easyjson"
	jlexer "github.com/userclouds/easyjson/jlexer"
	jwriter "github.com/userclouds/easyjson/jwriter"

	userstore "userclouds.com/idp/userstore"
	region "userclouds.com/infra/namespace/region"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

// easyjson31304c5DecodeUsercloudsComIdpInternalStorage implements json.Unmarshaler interface
func easyjson31304c5DecodeUsercloudsComIdpInternalStorage(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profile":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Profile = make(userstore.Record)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						if err := m.UnmarshalJSON(in.Raw()); err != nil {
							in.AddError(err)
						}
					} else {
						v1 = in.Interface()
					}
					(out.Profile)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "profile_consented_purpose_ids":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ProfileConsentedPurposeIDs = make(map[string][]ConsentedPurposeIDs)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 []ConsentedPurposeIDs
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						in.Delim('[')
						if v2 == nil {
							if !in.IsDelim(']') {
								v2 = make([]ConsentedPurposeIDs, 0, 2)
							} else {
								v2 = []ConsentedPurposeIDs{}
							}
						} else {
							v2 = (v2)[:0]
						}
						for !in.IsDelim(']') {
							var v3 ConsentedPurposeIDs
							if in.IsNull() {
								in.Skip()
								v3 = nil
							} else {
								in.Delim('[')
								if v3 == nil {
									if !in.IsDelim(']') {
										v3 = make(ConsentedPurposeIDs, 0, 4)
									} else {
										v3 = ConsentedPurposeIDs{}
									}
								} else {
									v3 = (v3)[:0]
								}
								for !in.IsDelim(']') {
									var v4 uuid.UUID
									if data := in.UnsafeBytes(); in.Ok() {
										in.AddError((v4).UnmarshalText(data))
									}
									v3 = append(v3, v4)
									in.WantComma()
								}
								in.Delim(']')
							}
							v2 = append(v2, v3)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.ProfileConsentedPurposeIDs)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "column_values":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ColumnValues = make(ColumnConsentedValues)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 map[uuid.UUID]ColumnConsentedValue
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v5 = make(map[uuid.UUID]ColumnConsentedValue)
						for !in.IsDelim('}') {
							var key uuid.UUID
							if data := in.UnsafeBytes(); in.Ok() {
								in.AddError(key.UnmarshalText(data))
							}
							in.WantColon()
							var v6 ColumnConsentedValue
							easyjson31304c5DecodeUsercloudsComIdpInternalStorage1(in, &v6)
							(v5)[key] = v6
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.ColumnValues)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "organization_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.OrganizationID).UnmarshalText(data))
			}
		case "region":
			out.Region = region.DataRegion(in.String())
		case "version":
			out.Version = int(in.Int())
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "deleted":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Deleted).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// easyjson31304c5EncodeUsercloudsComIdpInternalStorage implements json.Marshaler interface
func easyjson31304c5EncodeUsercloudsComIdpInternalStorage(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix[1:])
		if in.Profile == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Profile {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if m, ok := v7Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v7Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v7Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"profile_consented_purpose_ids\":"
		out.RawString(prefix)
		if in.ProfileConsentedPurposeIDs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.ProfileConsentedPurposeIDs {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if v8Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v9, v10 := range v8Value {
						if v9 > 0 {
							out.RawByte(',')
						}
						if v10 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v11, v12 := range v10 {
								if v11 > 0 {
									out.RawByte(',')
								}
								out.RawText((v12).MarshalText())
							}
							out.RawByte(']')
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"column_values\":"
		out.RawString(prefix)
		if in.ColumnValues == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.ColumnValues {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if v13Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v14First := true
					for v14Name, v14Value := range v13Value {
						if v14First {
							v14First = false
						} else {
							out.RawByte(',')
						}
						out.RawBytesString((v14Name).MarshalText())
						out.RawByte(':')
						easyjson31304c5EncodeUsercloudsComIdpInternalStorage1(out, v14Value)
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"organization_id\":"
		out.RawString(prefix)
		out.RawText((in.OrganizationID).MarshalText())
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.Created).MarshalJSON())
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Raw((in.Updated).MarshalJSON())
	}
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix)
		out.Raw((in.Deleted).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31304c5EncodeUsercloudsComIdpInternalStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31304c5EncodeUsercloudsComIdpInternalStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31304c5DecodeUsercloudsComIdpInternalStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31304c5DecodeUsercloudsComIdpInternalStorage(l, v)
}

// easyjson31304c5DecodeUsercloudsComIdpInternalStorage1 implements json.Unmarshaler interface
func easyjson31304c5DecodeUsercloudsComIdpInternalStorage1(in *jlexer.Lexer, out *ColumnConsentedValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "version":
			out.Version = int(in.Int())
		case "column_name":
			out.ColumnName = string(in.String())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				if err := m.UnmarshalJSON(in.Raw()); err != nil {
					in.AddError(err)
				}
			} else {
				out.Value = in.Interface()
			}
		case "ordering":
			out.Ordering = int(in.Int())
		case "consented_purposes":
			if in.IsNull() {
				in.Skip()
				out.ConsentedPurposes = nil
			} else {
				in.Delim('[')
				if out.ConsentedPurposes == nil {
					if !in.IsDelim(']') {
						out.ConsentedPurposes = make([]ConsentedPurpose, 0, 1)
					} else {
						out.ConsentedPurposes = []ConsentedPurpose{}
					}
				} else {
					out.ConsentedPurposes = (out.ConsentedPurposes)[:0]
				}
				for !in.IsDelim(']') {
					var v15 ConsentedPurpose
					easyjson31304c5DecodeUsercloudsComIdpInternalStorage2(in, &v15)
					out.ConsentedPurposes = append(out.ConsentedPurposes, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// easyjson31304c5EncodeUsercloudsComIdpInternalStorage1 implements json.Marshaler interface
func easyjson31304c5EncodeUsercloudsComIdpInternalStorage1(out *jwriter.Writer, in ColumnConsentedValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	{
		const prefix string = ",\"column_name\":"
		out.RawString(prefix)
		out.String(string(in.ColumnName))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	{
		const prefix string = ",\"ordering\":"
		out.RawString(prefix)
		out.Int(int(in.Ordering))
	}
	{
		const prefix string = ",\"consented_purposes\":"
		out.RawString(prefix)
		if in.ConsentedPurposes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.ConsentedPurposes {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson31304c5EncodeUsercloudsComIdpInternalStorage2(out, v17)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// easyjson31304c5DecodeUsercloudsComIdpInternalStorage2 implements json.Unmarshaler interface
func easyjson31304c5DecodeUsercloudsComIdpInternalStorage2(in *jlexer.Lexer, out *ConsentedPurpose) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "purpose":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Purpose).UnmarshalText(data))
			}
		case "retention_timeout":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RetentionTimeout).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}

// easyjson31304c5EncodeUsercloudsComIdpInternalStorage2 implements json.Marshaler interface
func easyjson31304c5EncodeUsercloudsComIdpInternalStorage2(out *jwriter.Writer, in ConsentedPurpose) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"purpose\":"
		out.RawString(prefix[1:])
		out.RawText((in.Purpose).MarshalText())
	}
	{
		const prefix string = ",\"retention_timeout\":"
		out.RawString(prefix)
		out.Raw((in.RetentionTimeout).MarshalJSON())
	}
	out.RawByte('}')
}
