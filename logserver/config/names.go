package config

import (
	"fmt"
	"strings"

	"github.com/gofrs/uuid"

	"userclouds.com/infra/namespace/service"
)

// AWS default company TODO switch to company wrapper
const (
	AWSDefaultOrg string = "323439664763"
)

// TenantBaseResourceNames contains names of per tenant resources required for any provisioned tenant
type TenantBaseResourceNames struct {
	StatusDBName     string
	StatusDBUserName string
}

// AdvancedAnalyticsResourceNames contains resource names for company's advanced analytics resources
type AdvancedAnalyticsResourceNames struct {
	TenantID        uuid.UUID
	Region          string
	StreamName      string
	UserName        string
	UserPolicyName  string
	AppPolicyName   string
	AppRoleName     string
	LogGroupName    string
	LogStreamName   string
	Bucket          string
	CodeFolder      string
	CodePath        string
	OutputFolder    string
	OutputPath      string
	ApplicationName string
	Provisioned     bool
	OrgIDAWS        string
	StreamARN       string
	UserARN         string
	BucketARN       string
	LogGroupARN     string
	LogStreamARN    string
	AppRoleARN      string
	UserPolicyARN   string
	AppPolicyARN    string
	ApplicationARN  string
	DBNames         TenantBaseResourceNames
}

// NewTenantBaseResourceNames populates resource names for basic resources
func NewTenantBaseResourceNames(tenantID uuid.UUID) TenantBaseResourceNames {
	var t TenantBaseResourceNames
	tenantIDStr := cleanTenantID(tenantID)
	t.StatusDBName = fmt.Sprintf("status_%s", tenantIDStr)
	t.StatusDBUserName = tenantIDStr

	return t
}

// NewAdvanceAnalyticsResourceNames populates the resource names. In order to prevent having to do a look up for the resource names
// and to keep the look up store in sync with the actual resources - we go with known autogenerated names which can
// be used to access all of the resources. The one exception to this is the AwsCompany which
// has to be linked to UserClouds company id in our config table
func NewAdvanceAnalyticsResourceNames(tenantID uuid.UUID, region string, service service.Service, companyIDAWS string) AdvancedAnalyticsResourceNames {
	var o AdvancedAnalyticsResourceNames
	o.TenantID = tenantID
	o.Region = region
	tenantIDStr := cleanTenantID(tenantID)
	o.StreamName = fmt.Sprintf("%s-%s", service, tenantIDStr)
	o.UserName = fmt.Sprintf("log-user-%s", tenantIDStr)
	o.UserPolicyName = fmt.Sprintf("%s_log_writer_%s", service, tenantIDStr)
	o.AppRoleName = fmt.Sprintf("%s_analytics_role_%s", service, tenantIDStr)
	o.AppPolicyName = fmt.Sprintf("%s_analytics_policy_%s", service, tenantIDStr)
	o.LogGroupName = fmt.Sprintf("/aws/kinesis-analytics-%s", tenantIDStr)
	o.LogStreamName = string(service)
	o.Bucket = fmt.Sprintf("kinesis-analytics-%s", tenantIDStr)
	o.CodeFolder = "output"
	o.OutputFolder = "code"
	o.CodePath = "code/kinesis-plexanalytics-1.0.jar"
	o.OutputPath = fmt.Sprintf("s3://%s/output/%s", o.Bucket, service)
	o.ApplicationName = fmt.Sprintf("%s_analytics_%s", service, tenantIDStr)
	o.Provisioned = false

	// AWS resource naming schema is fixed so the names can be precalculated and used for validation
	o.OrgIDAWS = companyIDAWS
	o.StreamARN = fmt.Sprintf("arn:aws:kinesis:%s:%s:stream/%s", o.Region, o.OrgIDAWS, o.StreamName)
	o.UserARN = fmt.Sprintf("arn:aws:iam::%s:user/%s", o.OrgIDAWS, o.UserName)
	o.UserPolicyARN = fmt.Sprintf("arn:aws:iam::%s:policy/%s", o.OrgIDAWS, o.UserPolicyName)
	o.AppPolicyARN = fmt.Sprintf("arn:aws:iam::%s:policy/%s", o.OrgIDAWS, o.AppPolicyName)
	o.LogGroupARN = fmt.Sprintf("arn:aws:logs:%s:%s:log-group:%s", o.Region, o.OrgIDAWS, o.LogGroupName)
	o.LogStreamARN = fmt.Sprintf("arn:aws:logs:%s:%s:log-group:%s:log-stream:%s", o.Region, o.OrgIDAWS, o.LogGroupName, o.LogStreamName)
	o.AppRoleARN = fmt.Sprintf("arn:aws:iam::%s:role/%s", o.OrgIDAWS, o.AppRoleName)
	o.BucketARN = fmt.Sprintf("arn:aws:s3:::%s", o.Bucket)
	o.ApplicationARN = fmt.Sprintf("arn:aws:kinesisanalytics:%s:%s:application/%s", o.Region, o.OrgIDAWS, o.ApplicationName)

	o.DBNames.StatusDBName = fmt.Sprintf("status_%s", tenantIDStr)

	return o
}

func cleanTenantID(tenantID uuid.UUID) string {
	return strings.ReplaceAll(tenantID.String(), "-", "")
}
